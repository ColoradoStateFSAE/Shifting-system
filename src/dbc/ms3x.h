/**
 * The MIT License (MIT)
 *
 * Copyright (c) 2018-2019 Erik Moqvist
 *
 * Permission is hereby granted, free of charge, to any person
 * obtaining a copy of this software and associated documentation
 * files (the "Software"), to deal in the Software without
 * restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies
 * of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be
 * included in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
 * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
 * NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
 * BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
 * ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file was generated by cantools version 38.0.2 Thu Jan 18 21:05:50 2024.
 */

#ifndef MS3X_H
#define MS3X_H

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
#include <stdbool.h>
#include <stddef.h>

#ifndef EINVAL
#    define EINVAL 22
#endif

/* Frame ids. */
#define MS3X_MEGASQUIRT_GP50_FRAME_ID (0x622u)
#define MS3X_MEGASQUIRT_GP63_FRAME_ID (0x62fu)
#define MS3X_MEGASQUIRT_GP62_FRAME_ID (0x62eu)
#define MS3X_MEGASQUIRT_GP61_FRAME_ID (0x62du)
#define MS3X_MEGASQUIRT_GP60_FRAME_ID (0x62cu)
#define MS3X_MEGASQUIRT_GP59_FRAME_ID (0x62bu)
#define MS3X_MEGASQUIRT_GP58_FRAME_ID (0x62au)
#define MS3X_MEGASQUIRT_GP57_FRAME_ID (0x629u)
#define MS3X_MEGASQUIRT_GP56_FRAME_ID (0x628u)
#define MS3X_MEGASQUIRT_GP55_FRAME_ID (0x627u)
#define MS3X_MEGASQUIRT_GP54_FRAME_ID (0x626u)
#define MS3X_MEGASQUIRT_GP53_FRAME_ID (0x625u)
#define MS3X_MEGASQUIRT_GP52_FRAME_ID (0x624u)
#define MS3X_MEGASQUIRT_GP51_FRAME_ID (0x623u)
#define MS3X_MEGASQUIRT_GP49_FRAME_ID (0x621u)
#define MS3X_MEGASQUIRT_GP48_FRAME_ID (0x620u)
#define MS3X_MEGASQUIRT_GP47_FRAME_ID (0x61fu)
#define MS3X_MEGASQUIRT_GP46_FRAME_ID (0x61eu)
#define MS3X_MEGASQUIRT_GP45_FRAME_ID (0x61du)
#define MS3X_MEGASQUIRT_GP44_FRAME_ID (0x61cu)
#define MS3X_MEGASQUIRT_GP43_FRAME_ID (0x61bu)
#define MS3X_MEGASQUIRT_GP42_FRAME_ID (0x61au)
#define MS3X_MEGASQUIRT_GP39_FRAME_ID (0x617u)
#define MS3X_MEGASQUIRT_GP41_FRAME_ID (0x619u)
#define MS3X_MEGASQUIRT_GP40_FRAME_ID (0x618u)
#define MS3X_MEGASQUIRT_GP38_FRAME_ID (0x616u)
#define MS3X_MEGASQUIRT_GP37_FRAME_ID (0x615u)
#define MS3X_MEGASQUIRT_GP36_FRAME_ID (0x614u)
#define MS3X_MEGASQUIRT_GP35_FRAME_ID (0x613u)
#define MS3X_MEGASQUIRT_GP34_FRAME_ID (0x612u)
#define MS3X_MEGASQUIRT_GP33_FRAME_ID (0x611u)
#define MS3X_MEGASQUIRT_GP32_FRAME_ID (0x610u)
#define MS3X_MEGASQUIRT_GP31_FRAME_ID (0x60fu)
#define MS3X_MEGASQUIRT_GP30_FRAME_ID (0x60eu)
#define MS3X_MEGASQUIRT_GP29_FRAME_ID (0x60du)
#define MS3X_MEGASQUIRT_GP28_FRAME_ID (0x60cu)
#define MS3X_MEGASQUIRT_GP27_FRAME_ID (0x60bu)
#define MS3X_MEGASQUIRT_GP26_FRAME_ID (0x60au)
#define MS3X_MEGASQUIRT_GP25_FRAME_ID (0x609u)
#define MS3X_MEGASQUIRT_GP24_FRAME_ID (0x608u)
#define MS3X_MEGASQUIRT_GP23_FRAME_ID (0x607u)
#define MS3X_MEGASQUIRT_GP22_FRAME_ID (0x606u)
#define MS3X_MEGASQUIRT_GP21_FRAME_ID (0x605u)
#define MS3X_MEGASQUIRT_GP20_FRAME_ID (0x604u)
#define MS3X_MEGASQUIRT_GP19_FRAME_ID (0x603u)
#define MS3X_MEGASQUIRT_GP18_FRAME_ID (0x602u)
#define MS3X_MEGASQUIRT_GP17_FRAME_ID (0x601u)
#define MS3X_MEGASQUIRT_GP16_FRAME_ID (0x600u)
#define MS3X_MEGASQUIRT_GP15_FRAME_ID (0x5ffu)
#define MS3X_MEGASQUIRT_GP14_FRAME_ID (0x5feu)
#define MS3X_MEGASQUIRT_GP13_FRAME_ID (0x5fdu)
#define MS3X_MEGASQUIRT_GP12_FRAME_ID (0x5fcu)
#define MS3X_MEGASQUIRT_GP11_FRAME_ID (0x5fbu)
#define MS3X_MEGASQUIRT_GP10_FRAME_ID (0x5fau)
#define MS3X_MEGASQUIRT_GP9_FRAME_ID (0x5f9u)
#define MS3X_MEGASQUIRT_GP8_FRAME_ID (0x5f8u)
#define MS3X_MEGASQUIRT_GP7_FRAME_ID (0x5f7u)
#define MS3X_MEGASQUIRT_GP6_FRAME_ID (0x5f6u)
#define MS3X_MEGASQUIRT_GP5_FRAME_ID (0x5f5u)
#define MS3X_MEGASQUIRT_GP4_FRAME_ID (0x5f4u)
#define MS3X_MEGASQUIRT_GP3_FRAME_ID (0x5f3u)
#define MS3X_MEGASQUIRT_GP2_FRAME_ID (0x5f2u)
#define MS3X_MEGASQUIRT_GP1_FRAME_ID (0x5f1u)
#define MS3X_MEGASQUIRT_GP0_FRAME_ID (0x5f0u)

/* Frame lengths in bytes. */
#define MS3X_MEGASQUIRT_GP50_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP63_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP62_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP61_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP60_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP59_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP58_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP57_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP56_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP55_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP54_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP53_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP52_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP51_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP49_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP48_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP47_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP46_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP45_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP44_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP43_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP42_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP39_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP41_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP40_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP38_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP37_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP36_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP35_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP34_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP33_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP32_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP31_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP30_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP29_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP28_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP27_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP26_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP25_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP24_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP23_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP22_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP21_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP20_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP19_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP18_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP17_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP16_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP15_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP14_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP13_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP12_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP11_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP10_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP9_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP8_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP7_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP6_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP5_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP4_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP3_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP2_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP1_LENGTH (8u)
#define MS3X_MEGASQUIRT_GP0_LENGTH (8u)

/* Extended or standard frame types. */
#define MS3X_MEGASQUIRT_GP50_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP63_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP62_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP61_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP60_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP59_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP58_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP57_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP56_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP55_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP54_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP53_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP52_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP51_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP49_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP48_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP47_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP46_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP45_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP44_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP43_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP42_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP39_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP41_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP40_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP38_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP37_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP36_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP35_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP34_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP33_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP32_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP31_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP30_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP29_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP28_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP27_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP26_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP25_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP24_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP23_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP22_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP21_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP20_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP19_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP18_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP17_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP16_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP15_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP14_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP13_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP12_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP11_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP10_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP9_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP8_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP7_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP6_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP5_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP4_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP3_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP2_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP1_IS_EXTENDED (0)
#define MS3X_MEGASQUIRT_GP0_IS_EXTENDED (0)

/* Frame cycle times in milliseconds. */


/* Signal choices. */


/**
 * Signals in message megasquirt_gp50.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp50_t {
    /**
     * MAPdot based accel
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t map_accel;

    /**
     * Total accel
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t total_accel;

    /**
     * Timer for timed-launch retard
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t launch_timer;

    /**
     * Launch retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t launch_retard;
};

/**
 * Signals in message megasquirt_gp63.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp63_t {
    /**
     * Generic closed-loop duty 1
     *
     * Range: -
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t generic_pid_duty1;

    /**
     * Generic closed-loop duty 2
     *
     * Range: -
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t generic_pid_duty2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t spare63_1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t spare63_2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t spare63_3;
};

/**
 * Signals in message megasquirt_gp62.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp62_t {
    /**
     * GPS longitude west indicator bit (gps_outstatus)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gps_west;

    /**
     * GPS altitude (km)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gps_altk;

    /**
     * GPS altitude (m)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t gps_altm;

    /**
     * GPS speed
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t gps_speed;

    /**
     * GPS course (heading)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t gps_course;
};

/**
 * Signals in message megasquirt_gp61.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp61_t {
    /**
     * GPS latitude degrees
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t gps_latdeg;

    /**
     * GPS latitude minutes
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_latmin;

    /**
     * GPS latitude milli-minutes
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t gps_latmmin;

    /**
     * GPS longitude degrees
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_londeg;

    /**
     * GPS longitude minutes
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gps_lonmin;

    /**
     * GPS longitude milli-minutes
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t gps_lonmmin;
};

/**
 * Signals in message megasquirt_gp60.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp60_t {
    /**
     * Launch control timing
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t launch_timing;

    /**
     * 3-step timing
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t step3_timing;

    /**
     * Wheel-speed based launch retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vsslaunch_retard;

    /**
     * CEL status bitfield 2
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cel_status2;
};

/**
 * Signals in message megasquirt_gp59.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp59_t {
    /**
     * Rev-limiter 'soft' retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t revlim_retard;

    /**
     * ALS timing change
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t als_timing;

    /**
     * External advance (e.g. trans)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ext_advance;

    /**
     * Injector deadtime in use (#1)
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t deadtime1;
};

/**
 * Signals in message megasquirt_gp58.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp58_t {
    /**
     * Timing lookup from table 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t adv1;

    /**
     * Timing lookup from table 2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t adv2;

    /**
     * Timing lookup from table 3
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t adv3;

    /**
     * Timing lookup from table 4
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t adv4;
};

/**
 * Signals in message megasquirt_gp57.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp57_t {
    /**
     * Base timing from tables
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t base_advance;

    /**
     * Idle correction advance
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t idle_cor_advance;

    /**
     * MAT retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t mat_retard;

    /**
     * Flex advance
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t flex_advance;
};

/**
 * Signals in message megasquirt_gp56.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp56_t {
    /**
     * Traction control retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tc_retard;

    /**
     * CEL retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t cel_retard;

    /**
     * Fuel-cut (overrun) retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fc_retard;

    /**
     * ALS added fuel
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t als_addfuel;
};

/**
 * Signals in message megasquirt_gp55.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp55_t {
    /**
     * Main code loop execution time
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t looptime;

    /**
     * Fuel temperature correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fueltemp_cor;

    /**
     * Fuel pressure correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t fuelpress_cor;

    /**
     * Long term trim correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int8_t ltt_cor;

    /**
     * Unused
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sp1;
};

/**
 * Signals in message megasquirt_gp54.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp54_t {
    /**
     * Battery current (alternator system)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t batt_cur;

    /**
     * CEL status bitfield 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cel_status;

    /**
     * Fuel pump output duty
     *
     * Range: -
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t fp_duty;

    /**
     * Alternator field output duty
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t alt_duty;

    /**
     * Alternator measured load-sense duty
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t load_duty;

    /**
     * Alternator target voltage
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t alt_targv;
};

/**
 * Signals in message megasquirt_gp53.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp53_t {
    /**
     * Fuel pressure 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_press1;

    /**
     * Fuel pressure 2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_press2;

    /**
     * Fuel temperature 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_temp1;

    /**
     * Fuel temperature 2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_temp2;
};

/**
 * Signals in message megasquirt_gp52.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp52_t {
    /**
     * CAN input 1 bitfield (CAN port 1 on MS2)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t canin1;

    /**
     * CAN input 2 bitfield (CAN port 2 on MS2)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t canin2;

    /**
     * CAN output 1 bitfield (CAN port 3 on MS2)
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t canout;

    /**
     * Knock retard
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t knk_rtd;

    /**
     * Average fuel flow
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fuelflow;

    /**
     * Average fuel consumption
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t fuelcons;
};

/**
 * Signals in message megasquirt_gp51.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp51_t {
    /**
     * CPU portA bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t porta;

    /**
     * CPU portB bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t portb;

    /**
     * CPU portE/portH bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t porteh;

    /**
     * CPU portK bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t portk;

    /**
     * CPU portM/portJ bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t portmj;

    /**
     * CPU portP bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t portp;

    /**
     * CPU portT bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t portt;

    /**
     * CEL error code
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t cel_errorcode;
};

/**
 * Signals in message megasquirt_gp49.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp49_t {
    /**
     * Knock % cyl #9
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl9;

    /**
     * Knock % cyl #10
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl10;

    /**
     * Knock % cyl #11
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl11;

    /**
     * Knock % cyl #12
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl12;

    /**
     * Knock % cyl #13
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl13;

    /**
     * Knock % cyl #14
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl14;

    /**
     * Knock % cyl #15
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl15;

    /**
     * Knock % cyl #16
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl16;
};

/**
 * Signals in message megasquirt_gp48.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp48_t {
    /**
     * Knock % cyl #1
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl1;

    /**
     * Knock % cyl #2
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl2;

    /**
     * Knock % cyl #3
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl3;

    /**
     * Knock % cyl #4
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl4;

    /**
     * Knock % cyl #5
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl5;

    /**
     * Knock % cyl #6
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl6;

    /**
     * Knock % cyl #7
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl7;

    /**
     * Knock % cyl #8
     *
     * Range: -
     * Scale: 0.4
     * Offset: 0
     */
    uint8_t knock_cyl8;
};

/**
 * Signals in message megasquirt_gp47.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp47_t {
    /**
     * Ethanol content of fuel from Flex sensor
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuel_pct;

    /**
     * TPSdot based accel
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tps_accel;

    /**
     * Shaft Speed 1
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t ss1;

    /**
     * Shaft Speed 2
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    uint16_t ss2;
};

/**
 * Signals in message megasquirt_gp46.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp46_t {
    /**
     * VVT solenoid duty cycle 1
     *
     * Range: -
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t vvt_duty1;

    /**
     * VVT solenoid duty cycle 2
     *
     * Range: -
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t vvt_duty2;

    /**
     * VVT solenoid duty cycle 3
     *
     * Range: -
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t vvt_duty3;

    /**
     * VVT solenoid duty cycle 4
     *
     * Range: -
     * Scale: 0.392
     * Offset: 0
     */
    uint8_t vvt_duty4;

    /**
     * Injection Timing Angle (Primary)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inj_timing_pri;

    /**
     * Injection Timing Angle (Secondary)
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t inj_timing_sec;
};

/**
 * Signals in message megasquirt_gp45.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp45_t {
    /**
     * VVT target angle 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_target1;

    /**
     * VVT target angle 2
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_target2;

    /**
     * VVT target angle 3
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_target3;

    /**
     * VVT target angle 4
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_target4;
};

/**
 * Signals in message megasquirt_gp44.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp44_t {
    /**
     * VVT actual angle 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_ang1;

    /**
     * VVT actual angle 2
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_ang2;

    /**
     * VVT actual angle 3
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_ang3;

    /**
     * VVT actual angle 4
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t vvt_ang4;
};

/**
 * Signals in message megasquirt_gp43.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp43_t {
    /**
     * Sync-loss counter
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t synccnt;

    /**
     * Sync-loss reason code
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t syncreason;

    /**
     * SDcard file number
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t sd_filenum;

    /**
     * SDcard error number
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sd_error;

    /**
     * SDcard internal code
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sd_phase;

    /**
     * SDcard status bitfield
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t sd_status;

    /**
     * Calculated error in ignition timing
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int8_t timing_err;
};

/**
 * Signals in message megasquirt_gp42.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp42_t {
    /**
     * Vehicle speed 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vss1;

    /**
     * Vehicle speed 2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vss2;

    /**
     * Vehicle speed 3
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vss3;

    /**
     * Vehicle speed 4
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t vss4;
};

/**
 * Signals in message megasquirt_gp39.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp39_t {
    /**
     * EGO correction cyl#5
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor5;

    /**
     * EGO correction cyl#6
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor6;

    /**
     * EGO correction cyl#7
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor7;

    /**
     * EGO correction cyl#8
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor8;
};

/**
 * Signals in message megasquirt_gp41.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp41_t {
    /**
     * EGO correction cyl#13
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor13;

    /**
     * EGO correction cyl#14
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor14;

    /**
     * EGO correction cyl#15
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor15;

    /**
     * EGO correction cyl#16
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor16;
};

/**
 * Signals in message megasquirt_gp40.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp40_t {
    /**
     * EGO correction cyl#9
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor9;

    /**
     * EGO correction cyl#10
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor10;

    /**
     * EGO correction cyl#11
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor11;

    /**
     * EGO correction cyl#12
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor12;
};

/**
 * Signals in message megasquirt_gp38.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp38_t {
    /**
     * EGO correction cyl#1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor1;

    /**
     * EGO correction cyl#2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor2;

    /**
     * EGO correction cyl#3
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor3;

    /**
     * EGO correction cyl#4
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eg_ocor4;
};

/**
 * Signals in message megasquirt_gp37.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp37_t {
    /**
     * Voltage from O2 cyl #13
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov13;

    /**
     * Voltage from O2 cyl #14
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov14;

    /**
     * Voltage from O2 cyl #15
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov15;

    /**
     * Voltage from O2 cyl #16
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov16;
};

/**
 * Signals in message megasquirt_gp36.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp36_t {
    /**
     * Voltage from O2 cyl #9
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov9;

    /**
     * Voltage from O2 cyl #10
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov10;

    /**
     * Voltage from O2 cyl #11
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov11;

    /**
     * Voltage from O2 cyl #12
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov12;
};

/**
 * Signals in message megasquirt_gp35.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp35_t {
    /**
     * Voltage from O2 cyl #5
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov5;

    /**
     * Voltage from O2 cyl #6
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov6;

    /**
     * Voltage from O2 cyl #7
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov7;

    /**
     * Voltage from O2 cyl #8
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov8;
};

/**
 * Signals in message megasquirt_gp34.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp34_t {
    /**
     * Voltage from O2 cyl #1
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov1;

    /**
     * Voltage from O2 cyl #2
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov2;

    /**
     * Voltage from O2 cyl #3
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov3;

    /**
     * Voltage from O2 cyl #4
     *
     * Range: -
     * Scale: 0.00489
     * Offset: 0
     */
    int16_t eg_ov4;
};

/**
 * Signals in message megasquirt_gp33.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp33_t {
    /**
     * Generic PWM duty 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t duty_pwm1;

    /**
     * Generic PWM duty 2
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t duty_pwm2;

    /**
     * Generic PWM duty 3
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t duty_pwm3;

    /**
     * Generic PWM duty 4
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t duty_pwm4;

    /**
     * Generic PWM duty 5
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t duty_pwm5;

    /**
     * Generic PWM duty 6
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t duty_pwm6;

    /**
     * Current gear selected
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t gear;

    /**
     * ECU status bitfield 8
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status8;
};

/**
 * Signals in message megasquirt_gp32.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp32_t {
    /**
     * AFR cyl #9
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr9;

    /**
     * AFR cyl #10
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr10;

    /**
     * AFR cyl #11
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr11;

    /**
     * AFR cyl #12
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr12;

    /**
     * AFR cyl #13
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr13;

    /**
     * AFR cyl #14
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr14;

    /**
     * AFR cyl #15
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr15;

    /**
     * AFR cyl #16
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr16;
};

/**
 * Signals in message megasquirt_gp31.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp31_t {
    /**
     * AFR cyl #1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr1;

    /**
     * AFR cyl #2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr2;

    /**
     * AFR cyl #3
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr3;

    /**
     * AFR cyl #4
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr4;

    /**
     * AFR cyl #5
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr5;

    /**
     * AFR cyl #6
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr6;

    /**
     * AFR cyl #7
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr7;

    /**
     * AFR cyl #8
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afr8;
};

/**
 * Signals in message megasquirt_gp30.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp30_t {
    /**
     * External accelerometer X
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t accelx;

    /**
     * External accelerometer Y
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t accely;

    /**
     * External accelerometer Z
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t accelz;

    /**
     * Volume level on audio input
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t stream_level;

    /**
     * Duty cycle to water injection solenoid
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t water_duty;
};

/**
 * Signals in message megasquirt_gp29.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp29_t {
    /**
     * Fuel correction from EAE - channel 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ea_efcor1;

    /**
     * Fuel correction from EAE - channel 2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t ea_efcor2;

    /**
     * Rate of change of VSS1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vss1dot;

    /**
     * Rate of change of VSS2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t vss2dot;
};

/**
 * Signals in message megasquirt_gp28.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp28_t {
    /**
     * Closed-loop idle target RPM
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t cl_idle_targ_rpm;

    /**
     * ADC count from TPS
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t tpsadc;

    /**
     * 'Load' used for EAE calc
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t eaeload;

    /**
     * 'Load' used for AFR table lookups
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t afrload;
};

/**
 * Signals in message megasquirt_gp27.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp27_t {
    /**
     * PWM period 1 from remote board
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t canpwmin1;

    /**
     * PWM period 2 from remote board
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t canpwmin2;

    /**
     * PWM period 3 from remote board
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t canpwmin3;

    /**
     * PWM period 4 from remote board
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t canpwmin4;
};

/**
 * Signals in message megasquirt_gp26.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp26_t {
    /**
     * Duty cycle to nitrous solenoid 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous1_duty;

    /**
     * Duty cycle to nitrous solenoid 2
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t nitrous2_duty;

    /**
     * Timer used internally for nitrous system
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t nitrous_timer_out;

    /**
     * Fuel pulsewidth added due to nitrous system
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t n2o_addfuel;

    /**
     * Timing retard due to nitrous system
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t n2o_retard;
};

/**
 * Signals in message megasquirt_gp25.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp25_t {
    /**
     * EGT cyl #13
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt13;

    /**
     * EGT cyl #14
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt14;

    /**
     * EGT cyl #15
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt15;

    /**
     * EGT cyl #16
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt16;
};

/**
 * Signals in message megasquirt_gp24.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp24_t {
    /**
     * EGT cyl #9
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt9;

    /**
     * EGT cyl #10
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt10;

    /**
     * EGT cyl #11
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt11;

    /**
     * EGT cyl #12
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt12;
};

/**
 * Signals in message megasquirt_gp23.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp23_t {
    /**
     * EGT cyl #5
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt5;

    /**
     * EGT cyl #6
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt6;

    /**
     * EGT cyl #7
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt7;

    /**
     * EGT cyl #8
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt8;
};

/**
 * Signals in message megasquirt_gp22.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp22_t {
    /**
     * EGT cyl #1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt1;

    /**
     * EGT cyl #2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt2;

    /**
     * EGT cyl #3
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt3;

    /**
     * EGT cyl #4
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egt4;
};

/**
 * Signals in message megasquirt_gp21.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp21_t {
    /**
     * Sequential pulsewidth for cyl #13
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq13;

    /**
     * Sequential pulsewidth for cyl #14
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq14;

    /**
     * Sequential pulsewidth for cyl #15
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq15;

    /**
     * Sequential pulsewidth for cyl #16
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq16;
};

/**
 * Signals in message megasquirt_gp20.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp20_t {
    /**
     * Sequential pulsewidth for cyl #9
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq9;

    /**
     * Sequential pulsewidth for cyl #10
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq10;

    /**
     * Sequential pulsewidth for cyl #11
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq11;

    /**
     * Sequential pulsewidth for cyl #12
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq12;
};

/**
 * Signals in message megasquirt_gp19.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp19_t {
    /**
     * Sequential pulsewidth for cyl #5
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq5;

    /**
     * Sequential pulsewidth for cyl #6
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq6;

    /**
     * Sequential pulsewidth for cyl #7
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq7;

    /**
     * Sequential pulsewidth for cyl #8
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq8;
};

/**
 * Signals in message megasquirt_gp18.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp18_t {
    /**
     * Sequential pulsewidth for cyl #1
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq1;

    /**
     * Sequential pulsewidth for cyl #2
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq2;

    /**
     * Sequential pulsewidth for cyl #3
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq3;

    /**
     * Sequential pulsewidth for cyl #4
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t pwseq4;
};

/**
 * Signals in message megasquirt_gp17.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp17_t {
    /**
     * Target boost - channel 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t boost_targ_1;

    /**
     * Target boost - channel 2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t boost_targ_2;

    /**
     * Duty cycle on boost solenoid 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t boostduty;

    /**
     * Duty cycle on boost solenoid 2
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t boostduty2;

    /**
     * MAF voltage
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    int16_t maf_volts;
};

/**
 * Signals in message megasquirt_gp16.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp16_t {
    /**
     * Generic sensor input 13
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors13;

    /**
     * Generic sensor input 14
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors14;

    /**
     * Generic sensor input 15
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors15;

    /**
     * Generic sensor input 16
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors16;
};

/**
 * Signals in message megasquirt_gp15.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp15_t {
    /**
     * Generic sensor input 19 (adc6 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors9;

    /**
     * Generic sensor input 10 (adc7 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors10;

    /**
     * Generic sensor input 11
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors11;

    /**
     * Generic sensor input 12
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors12;
};

/**
 * Signals in message megasquirt_gp14.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp14_t {
    /**
     * Generic sensor input 5 (gpioadc4 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors5;

    /**
     * Generic sensor input 6 (gpioadc5 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors6;

    /**
     * Generic sensor input 7 (gpioadc6 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors7;

    /**
     * Generic sensor input 8 (gpioadc7 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors8;
};

/**
 * Signals in message megasquirt_gp13.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp13_t {
    /**
     * Generic sensor input 1 (gpioadc0 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors1;

    /**
     * Generic sensor input 2 (gpioadc1 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors2;

    /**
     * Generic sensor input 3 (gpioadc2 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors3;

    /**
     * Generic sensor input 4 (gpioadc3 on MS2)
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t sensors4;
};

/**
 * Signals in message megasquirt_gp12.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp12_t {
    /**
     * Calculated volume of fuel on intake walls from EAE - channel 1
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int32_t wallfuel1;

    /**
     * Calculated volume of fuel on intake walls from EAE - channel 2
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int32_t wallfuel2;
};

/**
 * Signals in message megasquirt_gp11.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp11_t {
    /**
     * 'Load' used for modifier fuel table lookup
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuelload2;

    /**
     * 'Load' used for ignition table lookup
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ignload;

    /**
     * 'Load' used for modifier ignition table lookup
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ignload2;

    /**
     * Estimated intake air temperature
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t airtemp;
};

/**
 * Signals in message megasquirt_gp10.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp10_t {
    /**
     * ECU status bitfield 1
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status1;

    /**
     * ECU status bitfield 2
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status2;

    /**
     * ECU status bitfield 3
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status3;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status4;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t status5;

    /**
     * ECU status bitfield 6
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status6;

    /**
     * ECU status bitfield 7
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t status7;
};

/**
 * Signals in message megasquirt_gp9.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp9_t {
    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t ego_v1;

    /**
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t ego_v2;

    /**
     * Main ignition dwell
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dwell;

    /**
     * Trailing ignition dwell
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint16_t dwell_trl;
};

/**
 * Signals in message megasquirt_gp8.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp8_t {
    /**
     * Synthetic 'load' from MAF
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ma_fload;

    /**
     * 'Load' used for fuel table lookup
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuelload;

    /**
     * Adjustment to fuel from Flex
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t fuelcor;

    /**
     * Mass air flow
     *
     * Range: -
     * Scale: 0.01
     * Offset: 0
     */
    int16_t maf;
};

/**
 * Signals in message megasquirt_gp7.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp7_t {
    /**
     * Cold advance
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t cold_adv_deg;

    /**
     * Rate of change of TPS
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tp_sdot;

    /**
     * Rate of change of MAP
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t ma_pdot;

    /**
     * Rate of change of RPM
     *
     * Range: -
     * Scale: 10
     * Offset: 0
     */
    int16_t rp_mdot;
};

/**
 * Signals in message megasquirt_gp6.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp6_t {
    /**
     * Total fuel correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t totalcor;

    /**
     * VE table/bank 1
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ve1;

    /**
     * VE table/bank 2
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t ve2;

    /**
     * Stepper idle step number
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    int16_t iacstep;
};

/**
 * Signals in message megasquirt_gp5.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp5_t {
    /**
     * Warmup correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t warmcor;

    /**
     * TPS-based acceleration
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tpsaccel;

    /**
     * TPS-based fuel cut
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tpsfuelcut;

    /**
     * Barometric fuel correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t barocor;
};

/**
 * Signals in message megasquirt_gp4.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp4_t {
    /**
     * Indication of knock input
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t knock;

    /**
     * EGO bank 1 correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egocor1;

    /**
     * EGO bank 2 correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t egocor2;

    /**
     * Air density correction
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t aircor;
};

/**
 * Signals in message megasquirt_gp3.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp3_t {
    /**
     * Throttle position
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t tps;

    /**
     * Battery voltage
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t batt;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t afr1_old;

    /**
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t afr2_old;
};

/**
 * Signals in message megasquirt_gp2.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp2_t {
    /**
     * Barometric pressure
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t baro;

    /**
     * Manifold air pressure
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t map;

    /**
     * Manifold air temperature
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t mat;

    /**
     * Coolant temperature
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t clt;
};

/**
 * Signals in message megasquirt_gp1.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp1_t {
    /**
     * Final ignition spark advance
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    int16_t adv_deg;

    /**
     * Bitfield of batch fire injector events
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t squirt;

    /**
     * Bitfield of engine status
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t engine;

    /**
     * Bank 1 AFR target
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afrtgt1;

    /**
     * Bank 2 AFR target
     *
     * Range: -
     * Scale: 0.1
     * Offset: 0
     */
    uint8_t afrtgt2;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t wbo2_en1;

    /**
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint8_t wbo2_en2;
};

/**
 * Signals in message megasquirt_gp0.
 *
 * All signal values are as on the CAN bus.
 */
struct ms3x_megasquirt_gp0_t {
    /**
     * Seconds ECU has been on
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t seconds;

    /**
     * Main pulsewidth bank 1
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pw1;

    /**
     * Main pulsewidth bank 2
     *
     * Range: -
     * Scale: 0.001
     * Offset: 0
     */
    uint16_t pw2;

    /**
     * Engine RPM
     *
     * Range: -
     * Scale: 1
     * Offset: 0
     */
    uint16_t rpm;
};

/**
 * Pack message megasquirt_gp50.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp50_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp50_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp50.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp50_unpack(
    struct ms3x_megasquirt_gp50_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp50_map_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp50_map_accel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp50_map_accel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp50_total_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp50_total_accel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp50_total_accel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp50_launch_timer_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp50_launch_timer_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp50_launch_timer_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp50_launch_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp50_launch_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp50_launch_retard_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp63.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp63_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp63_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp63.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp63_unpack(
    struct ms3x_megasquirt_gp63_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp63_generic_pid_duty1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp63_generic_pid_duty1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp63_generic_pid_duty1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp63_generic_pid_duty2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp63_generic_pid_duty2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp63_generic_pid_duty2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp63_spare63_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp63_spare63_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp63_spare63_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp63_spare63_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp63_spare63_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp63_spare63_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp63_spare63_3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp63_spare63_3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp63_spare63_3_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp62.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp62_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp62_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp62.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp62_unpack(
    struct ms3x_megasquirt_gp62_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ms3x_megasquirt_gp62_gps_west_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp62_gps_west_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp62_gps_west_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ms3x_megasquirt_gp62_gps_altk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp62_gps_altk_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp62_gps_altk_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp62_gps_altm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp62_gps_altm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp62_gps_altm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp62_gps_speed_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp62_gps_speed_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp62_gps_speed_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp62_gps_course_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp62_gps_course_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp62_gps_course_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp61.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp61_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp61_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp61.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp61_unpack(
    struct ms3x_megasquirt_gp61_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ms3x_megasquirt_gp61_gps_latdeg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp61_gps_latdeg_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp61_gps_latdeg_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp61_gps_latmin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp61_gps_latmin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp61_gps_latmin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp61_gps_latmmin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp61_gps_latmmin_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp61_gps_latmmin_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp61_gps_londeg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp61_gps_londeg_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp61_gps_londeg_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp61_gps_lonmin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp61_gps_lonmin_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp61_gps_lonmin_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp61_gps_lonmmin_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp61_gps_lonmmin_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp61_gps_lonmmin_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp60.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp60_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp60_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp60.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp60_unpack(
    struct ms3x_megasquirt_gp60_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp60_launch_timing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp60_launch_timing_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp60_launch_timing_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp60_step3_timing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp60_step3_timing_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp60_step3_timing_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp60_vsslaunch_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp60_vsslaunch_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp60_vsslaunch_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp60_cel_status2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp60_cel_status2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp60_cel_status2_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp59.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp59_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp59_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp59.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp59_unpack(
    struct ms3x_megasquirt_gp59_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp59_revlim_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp59_revlim_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp59_revlim_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp59_als_timing_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp59_als_timing_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp59_als_timing_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp59_ext_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp59_ext_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp59_ext_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp59_deadtime1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp59_deadtime1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp59_deadtime1_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp58.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp58_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp58_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp58.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp58_unpack(
    struct ms3x_megasquirt_gp58_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp58_adv1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp58_adv1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp58_adv1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp58_adv2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp58_adv2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp58_adv2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp58_adv3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp58_adv3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp58_adv3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp58_adv4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp58_adv4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp58_adv4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp57.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp57_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp57_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp57.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp57_unpack(
    struct ms3x_megasquirt_gp57_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp57_base_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp57_base_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp57_base_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp57_idle_cor_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp57_idle_cor_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp57_idle_cor_advance_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp57_mat_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp57_mat_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp57_mat_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp57_flex_advance_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp57_flex_advance_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp57_flex_advance_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp56.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp56_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp56_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp56.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp56_unpack(
    struct ms3x_megasquirt_gp56_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp56_tc_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp56_tc_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp56_tc_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp56_cel_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp56_cel_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp56_cel_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp56_fc_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp56_fc_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp56_fc_retard_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp56_als_addfuel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp56_als_addfuel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp56_als_addfuel_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp55.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp55_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp55_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp55.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp55_unpack(
    struct ms3x_megasquirt_gp55_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp55_looptime_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp55_looptime_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp55_looptime_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp55_fueltemp_cor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp55_fueltemp_cor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp55_fueltemp_cor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp55_fuelpress_cor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp55_fuelpress_cor_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp55_fuelpress_cor_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ms3x_megasquirt_gp55_ltt_cor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp55_ltt_cor_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp55_ltt_cor_is_in_range(int8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp55_sp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp55_sp1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp55_sp1_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp54.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp54_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp54_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp54.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp54_unpack(
    struct ms3x_megasquirt_gp54_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp54_batt_cur_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp54_batt_cur_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp54_batt_cur_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp54_cel_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp54_cel_status_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp54_cel_status_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp54_fp_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp54_fp_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp54_fp_duty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp54_alt_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp54_alt_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp54_alt_duty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp54_load_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp54_load_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp54_load_duty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp54_alt_targv_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp54_alt_targv_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp54_alt_targv_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp53.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp53_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp53_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp53.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp53_unpack(
    struct ms3x_megasquirt_gp53_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp53_fuel_press1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp53_fuel_press1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp53_fuel_press1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp53_fuel_press2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp53_fuel_press2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp53_fuel_press2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp53_fuel_temp1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp53_fuel_temp1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp53_fuel_temp1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp53_fuel_temp2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp53_fuel_temp2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp53_fuel_temp2_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp52.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp52_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp52_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp52.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp52_unpack(
    struct ms3x_megasquirt_gp52_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp52_canin1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp52_canin1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp52_canin1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp52_canin2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp52_canin2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp52_canin2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp52_canout_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp52_canout_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp52_canout_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp52_knk_rtd_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp52_knk_rtd_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp52_knk_rtd_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp52_fuelflow_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp52_fuelflow_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp52_fuelflow_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp52_fuelcons_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp52_fuelcons_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp52_fuelcons_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp51.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp51_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp51_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp51.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp51_unpack(
    struct ms3x_megasquirt_gp51_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_porta_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_porta_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_porta_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_portb_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_portb_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_portb_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_porteh_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_porteh_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_porteh_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_portk_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_portk_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_portk_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_portmj_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_portmj_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_portmj_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_portp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_portp_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_portp_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_portt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_portt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_portt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp51_cel_errorcode_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp51_cel_errorcode_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp51_cel_errorcode_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp49.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp49_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp49_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp49.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp49_unpack(
    struct ms3x_megasquirt_gp49_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp49_knock_cyl16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp49_knock_cyl16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp49_knock_cyl16_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp48.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp48_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp48_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp48.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp48_unpack(
    struct ms3x_megasquirt_gp48_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp48_knock_cyl8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp48_knock_cyl8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp48_knock_cyl8_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp47.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp47_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp47_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp47.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp47_unpack(
    struct ms3x_megasquirt_gp47_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp47_fuel_pct_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp47_fuel_pct_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp47_fuel_pct_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp47_tps_accel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp47_tps_accel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp47_tps_accel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp47_ss1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp47_ss1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp47_ss1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp47_ss2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp47_ss2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp47_ss2_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp46.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp46_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp46_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp46.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp46_unpack(
    struct ms3x_megasquirt_gp46_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp46_vvt_duty1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp46_vvt_duty1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp46_vvt_duty1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp46_vvt_duty2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp46_vvt_duty2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp46_vvt_duty2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp46_vvt_duty3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp46_vvt_duty3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp46_vvt_duty3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp46_vvt_duty4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp46_vvt_duty4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp46_vvt_duty4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp46_inj_timing_pri_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp46_inj_timing_pri_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp46_inj_timing_pri_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp46_inj_timing_sec_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp46_inj_timing_sec_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp46_inj_timing_sec_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp45.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp45_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp45_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp45.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp45_unpack(
    struct ms3x_megasquirt_gp45_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp45_vvt_target1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp45_vvt_target1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp45_vvt_target1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp45_vvt_target2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp45_vvt_target2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp45_vvt_target2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp45_vvt_target3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp45_vvt_target3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp45_vvt_target3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp45_vvt_target4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp45_vvt_target4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp45_vvt_target4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp44.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp44_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp44_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp44.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp44_unpack(
    struct ms3x_megasquirt_gp44_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp44_vvt_ang1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp44_vvt_ang1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp44_vvt_ang1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp44_vvt_ang2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp44_vvt_ang2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp44_vvt_ang2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp44_vvt_ang3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp44_vvt_ang3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp44_vvt_ang3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp44_vvt_ang4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp44_vvt_ang4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp44_vvt_ang4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp43.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp43_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp43_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp43.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp43_unpack(
    struct ms3x_megasquirt_gp43_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp43_synccnt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp43_synccnt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp43_synccnt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp43_syncreason_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp43_syncreason_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp43_syncreason_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp43_sd_filenum_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp43_sd_filenum_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp43_sd_filenum_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp43_sd_error_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp43_sd_error_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp43_sd_error_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp43_sd_phase_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp43_sd_phase_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp43_sd_phase_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp43_sd_status_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp43_sd_status_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp43_sd_status_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int8_t ms3x_megasquirt_gp43_timing_err_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp43_timing_err_decode(int8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp43_timing_err_is_in_range(int8_t value);

/**
 * Pack message megasquirt_gp42.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp42_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp42_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp42.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp42_unpack(
    struct ms3x_megasquirt_gp42_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp42_vss1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp42_vss1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp42_vss1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp42_vss2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp42_vss2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp42_vss2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp42_vss3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp42_vss3_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp42_vss3_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp42_vss4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp42_vss4_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp42_vss4_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp39.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp39_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp39_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp39.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp39_unpack(
    struct ms3x_megasquirt_gp39_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp39_eg_ocor5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp39_eg_ocor5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp39_eg_ocor5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp39_eg_ocor6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp39_eg_ocor6_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp39_eg_ocor6_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp39_eg_ocor7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp39_eg_ocor7_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp39_eg_ocor7_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp39_eg_ocor8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp39_eg_ocor8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp39_eg_ocor8_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp41.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp41_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp41_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp41.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp41_unpack(
    struct ms3x_megasquirt_gp41_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp41_eg_ocor13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp41_eg_ocor13_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp41_eg_ocor13_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp41_eg_ocor14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp41_eg_ocor14_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp41_eg_ocor14_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp41_eg_ocor15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp41_eg_ocor15_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp41_eg_ocor15_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp41_eg_ocor16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp41_eg_ocor16_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp41_eg_ocor16_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp40.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp40_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp40_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp40.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp40_unpack(
    struct ms3x_megasquirt_gp40_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp40_eg_ocor9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp40_eg_ocor9_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp40_eg_ocor9_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp40_eg_ocor10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp40_eg_ocor10_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp40_eg_ocor10_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp40_eg_ocor11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp40_eg_ocor11_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp40_eg_ocor11_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp40_eg_ocor12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp40_eg_ocor12_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp40_eg_ocor12_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp38.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp38_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp38_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp38.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp38_unpack(
    struct ms3x_megasquirt_gp38_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp38_eg_ocor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp38_eg_ocor1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp38_eg_ocor1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp38_eg_ocor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp38_eg_ocor2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp38_eg_ocor2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp38_eg_ocor3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp38_eg_ocor3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp38_eg_ocor3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp38_eg_ocor4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp38_eg_ocor4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp38_eg_ocor4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp37.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp37_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp37_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp37.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp37_unpack(
    struct ms3x_megasquirt_gp37_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp37_eg_ov13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp37_eg_ov13_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp37_eg_ov13_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp37_eg_ov14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp37_eg_ov14_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp37_eg_ov14_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp37_eg_ov15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp37_eg_ov15_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp37_eg_ov15_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp37_eg_ov16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp37_eg_ov16_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp37_eg_ov16_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp36.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp36_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp36_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp36.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp36_unpack(
    struct ms3x_megasquirt_gp36_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp36_eg_ov9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp36_eg_ov9_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp36_eg_ov9_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp36_eg_ov10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp36_eg_ov10_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp36_eg_ov10_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp36_eg_ov11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp36_eg_ov11_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp36_eg_ov11_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp36_eg_ov12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp36_eg_ov12_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp36_eg_ov12_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp35.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp35_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp35_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp35.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp35_unpack(
    struct ms3x_megasquirt_gp35_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp35_eg_ov5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp35_eg_ov5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp35_eg_ov5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp35_eg_ov6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp35_eg_ov6_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp35_eg_ov6_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp35_eg_ov7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp35_eg_ov7_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp35_eg_ov7_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp35_eg_ov8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp35_eg_ov8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp35_eg_ov8_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp34.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp34_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp34_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp34.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp34_unpack(
    struct ms3x_megasquirt_gp34_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp34_eg_ov1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp34_eg_ov1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp34_eg_ov1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp34_eg_ov2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp34_eg_ov2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp34_eg_ov2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp34_eg_ov3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp34_eg_ov3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp34_eg_ov3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp34_eg_ov4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp34_eg_ov4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp34_eg_ov4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp33.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp33_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp33_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp33.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp33_unpack(
    struct ms3x_megasquirt_gp33_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_duty_pwm1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_duty_pwm1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_duty_pwm1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_duty_pwm2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_duty_pwm2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_duty_pwm2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_duty_pwm3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_duty_pwm3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_duty_pwm3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_duty_pwm4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_duty_pwm4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_duty_pwm4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_duty_pwm5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_duty_pwm5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_duty_pwm5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_duty_pwm6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_duty_pwm6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_duty_pwm6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_gear_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_gear_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_gear_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp33_status8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp33_status8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp33_status8_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp32.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp32_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp32_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp32.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp32_unpack(
    struct ms3x_megasquirt_gp32_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr9_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr9_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr10_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr10_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr11_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr11_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr12_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr12_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr13_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr13_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr14_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr14_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr15_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr15_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp32_afr16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp32_afr16_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp32_afr16_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp31.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp31_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp31_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp31.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp31_unpack(
    struct ms3x_megasquirt_gp31_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr5_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr5_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr7_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp31_afr8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp31_afr8_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp31_afr8_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp30.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp30_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp30_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp30.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp30_unpack(
    struct ms3x_megasquirt_gp30_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp30_accelx_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp30_accelx_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp30_accelx_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp30_accely_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp30_accely_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp30_accely_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp30_accelz_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp30_accelz_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp30_accelz_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp30_stream_level_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp30_stream_level_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp30_stream_level_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp30_water_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp30_water_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp30_water_duty_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp29.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp29_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp29_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp29.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp29_unpack(
    struct ms3x_megasquirt_gp29_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp29_ea_efcor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp29_ea_efcor1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp29_ea_efcor1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp29_ea_efcor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp29_ea_efcor2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp29_ea_efcor2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp29_vss1dot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp29_vss1dot_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp29_vss1dot_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp29_vss2dot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp29_vss2dot_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp29_vss2dot_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp28.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp28_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp28_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp28.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp28_unpack(
    struct ms3x_megasquirt_gp28_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp28_cl_idle_targ_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp28_cl_idle_targ_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp28_cl_idle_targ_rpm_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp28_tpsadc_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp28_tpsadc_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp28_tpsadc_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp28_eaeload_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp28_eaeload_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp28_eaeload_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp28_afrload_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp28_afrload_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp28_afrload_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp27.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp27_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp27_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp27.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp27_unpack(
    struct ms3x_megasquirt_gp27_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp27_canpwmin1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp27_canpwmin1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp27_canpwmin1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp27_canpwmin2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp27_canpwmin2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp27_canpwmin2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp27_canpwmin3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp27_canpwmin3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp27_canpwmin3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp27_canpwmin4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp27_canpwmin4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp27_canpwmin4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp26.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp26_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp26_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp26.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp26_unpack(
    struct ms3x_megasquirt_gp26_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp26_nitrous1_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp26_nitrous1_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp26_nitrous1_duty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp26_nitrous2_duty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp26_nitrous2_duty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp26_nitrous2_duty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp26_nitrous_timer_out_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp26_nitrous_timer_out_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp26_nitrous_timer_out_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp26_n2o_addfuel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp26_n2o_addfuel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp26_n2o_addfuel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp26_n2o_retard_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp26_n2o_retard_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp26_n2o_retard_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp25.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp25_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp25_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp25.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp25_unpack(
    struct ms3x_megasquirt_gp25_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp25_egt13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp25_egt13_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp25_egt13_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp25_egt14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp25_egt14_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp25_egt14_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp25_egt15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp25_egt15_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp25_egt15_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp25_egt16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp25_egt16_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp25_egt16_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp24.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp24_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp24_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp24.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp24_unpack(
    struct ms3x_megasquirt_gp24_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp24_egt9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp24_egt9_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp24_egt9_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp24_egt10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp24_egt10_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp24_egt10_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp24_egt11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp24_egt11_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp24_egt11_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp24_egt12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp24_egt12_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp24_egt12_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp23.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp23_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp23_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp23.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp23_unpack(
    struct ms3x_megasquirt_gp23_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp23_egt5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp23_egt5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp23_egt5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp23_egt6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp23_egt6_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp23_egt6_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp23_egt7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp23_egt7_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp23_egt7_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp23_egt8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp23_egt8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp23_egt8_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp22.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp22_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp22_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp22.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp22_unpack(
    struct ms3x_megasquirt_gp22_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp22_egt1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp22_egt1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp22_egt1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp22_egt2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp22_egt2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp22_egt2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp22_egt3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp22_egt3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp22_egt3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp22_egt4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp22_egt4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp22_egt4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp21.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp21_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp21_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp21.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp21_unpack(
    struct ms3x_megasquirt_gp21_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp21_pwseq13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp21_pwseq13_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp21_pwseq13_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp21_pwseq14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp21_pwseq14_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp21_pwseq14_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp21_pwseq15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp21_pwseq15_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp21_pwseq15_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp21_pwseq16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp21_pwseq16_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp21_pwseq16_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp20.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp20_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp20_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp20.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp20_unpack(
    struct ms3x_megasquirt_gp20_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp20_pwseq9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp20_pwseq9_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp20_pwseq9_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp20_pwseq10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp20_pwseq10_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp20_pwseq10_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp20_pwseq11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp20_pwseq11_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp20_pwseq11_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp20_pwseq12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp20_pwseq12_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp20_pwseq12_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp19.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp19_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp19_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp19.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp19_unpack(
    struct ms3x_megasquirt_gp19_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp19_pwseq5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp19_pwseq5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp19_pwseq5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp19_pwseq6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp19_pwseq6_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp19_pwseq6_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp19_pwseq7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp19_pwseq7_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp19_pwseq7_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp19_pwseq8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp19_pwseq8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp19_pwseq8_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp18.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp18_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp18_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp18.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp18_unpack(
    struct ms3x_megasquirt_gp18_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp18_pwseq1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp18_pwseq1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp18_pwseq1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp18_pwseq2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp18_pwseq2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp18_pwseq2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp18_pwseq3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp18_pwseq3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp18_pwseq3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp18_pwseq4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp18_pwseq4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp18_pwseq4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp17.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp17_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp17_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp17.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp17_unpack(
    struct ms3x_megasquirt_gp17_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp17_boost_targ_1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp17_boost_targ_1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp17_boost_targ_1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp17_boost_targ_2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp17_boost_targ_2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp17_boost_targ_2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp17_boostduty_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp17_boostduty_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp17_boostduty_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp17_boostduty2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp17_boostduty2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp17_boostduty2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp17_maf_volts_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp17_maf_volts_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp17_maf_volts_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp16.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp16_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp16_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp16.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp16_unpack(
    struct ms3x_megasquirt_gp16_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp16_sensors13_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp16_sensors13_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp16_sensors13_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp16_sensors14_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp16_sensors14_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp16_sensors14_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp16_sensors15_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp16_sensors15_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp16_sensors15_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp16_sensors16_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp16_sensors16_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp16_sensors16_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp15.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp15_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp15_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp15.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp15_unpack(
    struct ms3x_megasquirt_gp15_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp15_sensors9_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp15_sensors9_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp15_sensors9_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp15_sensors10_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp15_sensors10_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp15_sensors10_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp15_sensors11_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp15_sensors11_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp15_sensors11_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp15_sensors12_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp15_sensors12_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp15_sensors12_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp14.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp14_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp14_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp14.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp14_unpack(
    struct ms3x_megasquirt_gp14_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp14_sensors5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp14_sensors5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp14_sensors5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp14_sensors6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp14_sensors6_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp14_sensors6_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp14_sensors7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp14_sensors7_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp14_sensors7_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp14_sensors8_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp14_sensors8_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp14_sensors8_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp13.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp13_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp13_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp13.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp13_unpack(
    struct ms3x_megasquirt_gp13_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp13_sensors1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp13_sensors1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp13_sensors1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp13_sensors2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp13_sensors2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp13_sensors2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp13_sensors3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp13_sensors3_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp13_sensors3_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp13_sensors4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp13_sensors4_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp13_sensors4_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp12.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp12_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp12_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp12.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp12_unpack(
    struct ms3x_megasquirt_gp12_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ms3x_megasquirt_gp12_wallfuel1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp12_wallfuel1_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp12_wallfuel1_is_in_range(int32_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int32_t ms3x_megasquirt_gp12_wallfuel2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp12_wallfuel2_decode(int32_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp12_wallfuel2_is_in_range(int32_t value);

/**
 * Pack message megasquirt_gp11.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp11_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp11_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp11.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp11_unpack(
    struct ms3x_megasquirt_gp11_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp11_fuelload2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp11_fuelload2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp11_fuelload2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp11_ignload_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp11_ignload_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp11_ignload_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp11_ignload2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp11_ignload2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp11_ignload2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp11_airtemp_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp11_airtemp_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp11_airtemp_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp10.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp10_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp10_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp10.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp10_unpack(
    struct ms3x_megasquirt_gp10_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp10_status1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp10_status1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp10_status1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp10_status2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp10_status2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp10_status2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp10_status3_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp10_status3_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp10_status3_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp10_status4_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp10_status4_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp10_status4_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp10_status5_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp10_status5_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp10_status5_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp10_status6_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp10_status6_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp10_status6_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp10_status7_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp10_status7_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp10_status7_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp9.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp9_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp9_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp9.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp9_unpack(
    struct ms3x_megasquirt_gp9_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp9_ego_v1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp9_ego_v1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp9_ego_v1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp9_ego_v2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp9_ego_v2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp9_ego_v2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp9_dwell_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp9_dwell_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp9_dwell_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp9_dwell_trl_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp9_dwell_trl_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp9_dwell_trl_is_in_range(uint16_t value);

/**
 * Pack message megasquirt_gp8.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp8_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp8_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp8.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp8_unpack(
    struct ms3x_megasquirt_gp8_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp8_ma_fload_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp8_ma_fload_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp8_ma_fload_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp8_fuelload_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp8_fuelload_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp8_fuelload_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp8_fuelcor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp8_fuelcor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp8_fuelcor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp8_maf_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp8_maf_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp8_maf_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp7.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp7_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp7_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp7.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp7_unpack(
    struct ms3x_megasquirt_gp7_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp7_cold_adv_deg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp7_cold_adv_deg_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp7_cold_adv_deg_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp7_tp_sdot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp7_tp_sdot_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp7_tp_sdot_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp7_ma_pdot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp7_ma_pdot_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp7_ma_pdot_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp7_rp_mdot_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp7_rp_mdot_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp7_rp_mdot_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp6.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp6_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp6_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp6.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp6_unpack(
    struct ms3x_megasquirt_gp6_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp6_totalcor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp6_totalcor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp6_totalcor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp6_ve1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp6_ve1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp6_ve1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp6_ve2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp6_ve2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp6_ve2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp6_iacstep_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp6_iacstep_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp6_iacstep_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp5.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp5_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp5_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp5.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp5_unpack(
    struct ms3x_megasquirt_gp5_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp5_warmcor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp5_warmcor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp5_warmcor_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp5_tpsaccel_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp5_tpsaccel_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp5_tpsaccel_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp5_tpsfuelcut_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp5_tpsfuelcut_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp5_tpsfuelcut_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp5_barocor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp5_barocor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp5_barocor_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp4.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp4_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp4_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp4.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp4_unpack(
    struct ms3x_megasquirt_gp4_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp4_knock_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp4_knock_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp4_knock_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp4_egocor1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp4_egocor1_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp4_egocor1_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp4_egocor2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp4_egocor2_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp4_egocor2_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp4_aircor_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp4_aircor_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp4_aircor_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp3.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp3_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp3_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp3.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp3_unpack(
    struct ms3x_megasquirt_gp3_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp3_tps_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp3_tps_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp3_tps_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp3_batt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp3_batt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp3_batt_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp3_afr1_old_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp3_afr1_old_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp3_afr1_old_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp3_afr2_old_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp3_afr2_old_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp3_afr2_old_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp2.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp2_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp2_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp2.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp2_unpack(
    struct ms3x_megasquirt_gp2_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp2_baro_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp2_baro_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp2_baro_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp2_map_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp2_map_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp2_map_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp2_mat_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp2_mat_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp2_mat_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp2_clt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp2_clt_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp2_clt_is_in_range(int16_t value);

/**
 * Pack message megasquirt_gp1.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp1_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp1_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp1.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp1_unpack(
    struct ms3x_megasquirt_gp1_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
int16_t ms3x_megasquirt_gp1_adv_deg_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp1_adv_deg_decode(int16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp1_adv_deg_is_in_range(int16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp1_squirt_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp1_squirt_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp1_squirt_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp1_engine_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp1_engine_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp1_engine_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp1_afrtgt1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp1_afrtgt1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp1_afrtgt1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp1_afrtgt2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp1_afrtgt2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp1_afrtgt2_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp1_wbo2_en1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp1_wbo2_en1_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp1_wbo2_en1_is_in_range(uint8_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint8_t ms3x_megasquirt_gp1_wbo2_en2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp1_wbo2_en2_decode(uint8_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp1_wbo2_en2_is_in_range(uint8_t value);

/**
 * Pack message megasquirt_gp0.
 *
 * @param[out] dst_p Buffer to pack the message into.
 * @param[in] src_p Data to pack.
 * @param[in] size Size of dst_p.
 *
 * @return Size of packed data, or negative error code.
 */
int ms3x_megasquirt_gp0_pack(
    uint8_t *dst_p,
    const struct ms3x_megasquirt_gp0_t *src_p,
    size_t size);

/**
 * Unpack message megasquirt_gp0.
 *
 * @param[out] dst_p Object to unpack the message into.
 * @param[in] src_p Message to unpack.
 * @param[in] size Size of src_p.
 *
 * @return zero(0) or negative error code.
 */
int ms3x_megasquirt_gp0_unpack(
    struct ms3x_megasquirt_gp0_t *dst_p,
    const uint8_t *src_p,
    size_t size);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp0_seconds_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp0_seconds_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp0_seconds_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp0_pw1_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp0_pw1_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp0_pw1_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp0_pw2_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp0_pw2_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp0_pw2_is_in_range(uint16_t value);

/**
 * Encode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to encode.
 *
 * @return Encoded signal.
 */
uint16_t ms3x_megasquirt_gp0_rpm_encode(double value);

/**
 * Decode given signal by applying scaling and offset.
 *
 * @param[in] value Signal to decode.
 *
 * @return Decoded signal.
 */
double ms3x_megasquirt_gp0_rpm_decode(uint16_t value);

/**
 * Check that given signal is in allowed range.
 *
 * @param[in] value Signal to check.
 *
 * @return true if in range, false otherwise.
 */
bool ms3x_megasquirt_gp0_rpm_is_in_range(uint16_t value);


#ifdef __cplusplus
}
#endif

#endif
